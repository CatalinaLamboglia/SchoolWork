// Name: control_unit.v
// Module: CONTROL_UNIT
// Output: RF_DATA_W  : Data to be written at register file address RF_ADDR_W
//         RF_ADDR_W  : Register file address of the memory location to be written
//         RF_ADDR_R1 : Register file address of the memory location to be read for RF_DATA_R1
//         RF_ADDR_R2 : Registere file address of the memory location to be read for RF_DATA_R2
//         RF_READ    : Register file Read signal
//         RF_WRITE   : Register file Write signal
//         ALU_OP1    : ALU operand 1
//         ALU_OP2    : ALU operand 2
//         ALU_OPRN   : ALU operation code
//         MEM_ADDR   : Memory address to be read in
//         MEM_READ   : Memory read signal
//         MEM_WRITE  : Memory write signal
//         
// Input:  RF_DATA_R1 : Data at ADDR_R1 address
//         RF_DATA_R2 : Data at ADDR_R1 address
//         ALU_RESULT    : ALU output data
//         CLK        : Clock signal
//         RST        : Reset signal
//
// INOUT: MEM_DATA    : Data to be read in from or write to the memory
//
// Notes: - Control unit synchronize operations of a processor
//
// Revision History:
//
// Version	Date		Who		email			note
//------------------------------------------------------------------------------------------
//  1.0     Sep 10, 2014	Kaushik Patra	kpatra@sjsu.edu		Initial creation
//  1.1     Oct 19, 2014        Kaushik Patra   kpatra@sjsu.edu         Added ZERO status output
//------------------------------------------------------------------------------------------
`include "prj_definition.v"
module CONTROL_UNIT(MEM_DATA, RF_DATA_W, RF_ADDR_W, RF_ADDR_R1, RF_ADDR_R2, RF_READ, RF_WRITE,
                    ALU_OP1, ALU_OP2, ALU_OPRN, MEM_ADDR, MEM_READ, MEM_WRITE,
                    RF_DATA_R1, RF_DATA_R2, ALU_RESULT, ZERO, CLK, RST); 

// Output signals
// Outputs for register file 
output [`DATA_INDEX_LIMIT:0] RF_DATA_W;
output [`ADDRESS_INDEX_LIMIT:0] RF_ADDR_W, RF_ADDR_R1, RF_ADDR_R2;
output RF_READ, RF_WRITE;
// Outputs for ALU
output [`DATA_INDEX_LIMIT:0]  ALU_OP1, ALU_OP2;
//output ALU_ZERO;
output  [`ALU_OPRN_INDEX_LIMIT:0] ALU_OPRN;
// Outputs for memory
output [`ADDRESS_INDEX_LIMIT:0]  MEM_ADDR;
output MEM_READ, MEM_WRITE;

// Input signals
input [`DATA_INDEX_LIMIT:0] RF_DATA_R1, RF_DATA_R2, ALU_RESULT;
input ZERO, CLK, RST;

// Inout signal
inout [`DATA_INDEX_LIMIT:0] MEM_DATA;

// Output Registers
reg [`DATA_INDEX_LIMIT:0] RF_DATA_W;
reg [`ADDRESS_INDEX_LIMIT:0] RF_ADDR_W, RF_ADDR_R1, RF_ADDR_R2;
reg RF_READ, RF_WRITE;
// Outputs for ALU
reg [`DATA_INDEX_LIMIT:0]  ALU_OP1, ALU_OP2;
reg  [`ALU_OPRN_INDEX_LIMIT:0] ALU_OPRN;
// Outputs for memory
reg [`ADDRESS_INDEX_LIMIT:0]  MEM_ADDR;
reg MEM_READ, MEM_WRITE;
reg [`DATA_INDEX_LIMIT:0] write_data;

reg [`ADDRESS_INDEX_LIMIT:0] PC_REG;
//reg [2:0] INST_REG;
reg [`DATA_INDEX_LIMIT:0] INST_REG;
reg [`DATA_INDEX_LIMIT:0] SP_REF;

// State nets
wire [2:0] proc_state;


//input [`DATA_INDEX_LIMIT:0] inst;
reg [5:0] opcode;
reg [4:0] rs;
reg [4:0] rt;
reg [4:0] rd;
reg [4:0] shamt;
reg [5:0] funct;
reg [15:0] immediate;
reg [25:0] address;

reg [`REG_INDEX_LIMIT:0] signExtImm;
reg [`REG_INDEX_LIMIT:0] zeroExtImm;
reg [`REG_INDEX_LIMIT:0] branchAddress;

// reg [`DATA_INDEX_LIMIT:0] tempData;




assign MEM_DATA = ((MEM_READ===1'b0)&&(MEM_WRITE===1'b1))?write_data:{`DATA_WIDTH{1'bZ} };

PROC_SM state_machine(.STATE(proc_state),.CLK(CLK),.RST(RST));

MEMORY_64MB mem_inst(.DATA(MEM_DATA), .ADDR(MEM_ADDR), .READ(MEM_READ), 
                     .WRITE(MEM_WRITE), .CLK(CLK), .RST(RST));

REGISTER_FILE_32x32 reg_inst(.DATA_R1(RF_DATA_R1),.DATA_R2(RF_DATA_R2), .ADDR_R1(RF_ADDR_R1),
		     .ADDR_R2(RF_ADDR_R2), .DATA_W(RF_DATA_W), .ADDR_W(RF_ADDR_W), 
                     .READ(RF_READ), .WRITE(RF_WRITE), .CLK(CLK), .RST(RST));

ALU ALU_INST_01(.OUT(ALU_RESULT), .ZERO(ZERO), .OP1(ALU_OP2), 
                .OP2(ALU_OP1), .OPRN(ALU_OPRN));
always @ (proc_state)
begin

    if (proc_state === `PROC_FETCH)
    begin 
        MEM_ADDR = PC_REG;
        MEM_READ = 1;
        MEM_WRITE = 0;
        RF_READ = 0;
	RF_WRITE = 0;
    end

    if (proc_state === `PROC_DECODE)
    begin 
    INST_REG = MEM_DATA;
    {opcode, rs, rt, rd, shamt, funct} = INST_REG;
    // I-type
    {opcode, rs, rt, immediate } = INST_REG;
    // J-type
    {opcode, address} = INST_REG;
    
    signExtImm = {{16{immediate[15]}}, immediate}; 
    zeroExtImm = {{16{1'b0}}, immediate};
    branchAddress = signExtImm + PC_REG + 1;
    // Branch address is signExtImm + PC + 1
    
    case(opcode)
    // R-Type
    6'h00 : begin
        case(funct)
            6'h20: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end // add
            6'h22: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end  // sub
            6'h2c: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end  // mul
            6'h24: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end  // and
            6'h25: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end  // or
            6'h27: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end // nor
            6'h2a: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end  // slt
            6'h01: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end  // sll
            6'h02: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end  // srl
            6'h08: begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end  // jr
        endcase
    end
    // I-type
    6'h08 :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end  // addi
    6'h1d :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end // multi
    6'h0c :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end // andi
    6'h0d :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end // ori
    6'h0f :  ; // lui -- do nothing
    6'h0a :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end // slti
    6'h04 :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end // beq
    6'h05 :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end // bne
    6'h23 :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; end // lw
    6'h2b :  begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = rs; RF_ADDR_R2 = rt; end // sw
    // J-Type
    6'h02 : ; // jmp -- do nothing
    6'h03 : ; // jal -- do nothing
    6'h1b : begin RF_READ = 1; RF_WRITE = 0; RF_ADDR_R1 = 0; end // push
    6'h1c : ; // pop -- do nothing

    endcase
    end

    if (proc_state === `PROC_EXE)
    begin 
    case(opcode)
    // R-Type
    6'h00 : begin
        case(funct)
            6'h20:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h01; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // add
            6'h22:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h02; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // sub
            6'h2c:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h03; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // mul
            6'h24:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h06; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // and
            6'h25:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h07; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // or
            6'h27:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h08; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // nor
            6'h2a:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h09; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // slt
            6'h01:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h05; ALU_OP1 = RF_DATA_R1; ALU_OP2 = shamt; end // sll
            6'h02:  begin ALU_OPRN = `ALU_OPRN_WIDTH'h04; ALU_OP1 = RF_DATA_R1; ALU_OP2 = shamt; end // srl
            6'h08:  ; // jr -- do nothing
        endcase
    end
    // I-type
    6'h08 :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h01; ALU_OP1 = RF_DATA_R1; ALU_OP2 = signExtImm; end // addi
    6'h1d :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h03; ALU_OP1 = RF_DATA_R1; ALU_OP2 = signExtImm; end // multi
    6'h0c :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h06; ALU_OP1 = RF_DATA_R1; ALU_OP2 = zeroExtImm; end // andi
    6'h0d :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h07; ALU_OP1 = RF_DATA_R1; ALU_OP2 = zeroExtImm; end // ori
    6'h0f :  ; // lui -- do nothing
    6'h0a :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h09; ALU_OP1 = RF_DATA_R1; ALU_OP2 = signExtImm; end // slti
    6'h04 :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h02; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // beq
    6'h05 :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h02; ALU_OP1 = RF_DATA_R1; ALU_OP2 = RF_DATA_R2; end // bne
    6'h23 :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h01; ALU_OP1 = RF_DATA_R1; ALU_OP2 = signExtImm; end // lw 
    6'h2b :  begin ALU_OPRN = `ALU_OPRN_WIDTH'h01; ALU_OP1 = RF_DATA_R1; ALU_OP2 = signExtImm; end // sw
    // J-Type
    6'h02 : ; // jmp -- do nothing
    6'h03 : ; // jal -- do nothing
    6'h1b : ; // push -- do nothing
    6'h1c : ; // pop -- do nothing
    endcase
    end

    if (proc_state === `PROC_MEM)
    begin 
    case(opcode)
    // R-Type
    6'h00 : begin
        case(funct)
            6'h20:  begin MEM_READ = 0; MEM_WRITE = 0; end // add
            6'h22:  begin MEM_READ = 0; MEM_WRITE = 0; end // sub
            6'h2c:  begin MEM_READ = 0; MEM_WRITE = 0; end // mul
            6'h24:  begin MEM_READ = 0; MEM_WRITE = 0; end // and
            6'h25:  begin MEM_READ = 0; MEM_WRITE = 0; end // or
            6'h27:  begin MEM_READ = 0; MEM_WRITE = 0; end // nor
            6'h2a:  begin MEM_READ = 0; MEM_WRITE = 0; end // slt
            6'h01:  begin MEM_READ = 0; MEM_WRITE = 0; end // sll
            6'h02:  begin MEM_READ = 0; MEM_WRITE = 0; end //srl
            6'h08:  begin MEM_READ = 0; MEM_WRITE = 0; end // jr
        endcase
    end
    // I-type
    6'h08 :  begin MEM_READ = 0; MEM_WRITE = 0; end // addi
    6'h1d :  begin MEM_READ = 0; MEM_WRITE = 0; end // multi
    6'h0c :  begin MEM_READ = 0; MEM_WRITE = 0; end // andi
    6'h0d :  begin MEM_READ = 0; MEM_WRITE = 0; end // ori
    6'h0f :  begin MEM_READ = 0; MEM_WRITE = 0; end // lui
    6'h0a :  begin MEM_READ = 0; MEM_WRITE = 0; end // slti
    6'h04 :  begin MEM_READ = 0; MEM_WRITE = 0; end // beq
    6'h05 :  begin MEM_READ = 0; MEM_WRITE = 0; end // bne
    6'h23 :  begin MEM_READ = 1; MEM_WRITE = 0; MEM_ADDR = ALU_RESULT; end // lw
    6'h2b :  begin MEM_READ = 0; MEM_WRITE = 1; MEM_ADDR = ALU_RESULT; write_data = RF_DATA_R2; end // sw
    // J-Type
    6'h02 : begin MEM_READ = 0; MEM_WRITE = 0; end // jmp
    6'h03 : begin MEM_READ = 0; MEM_WRITE = 0; end // jal
    6'h1b : begin MEM_READ = 0; MEM_WRITE = 1; MEM_ADDR = SP_REF; write_data = RF_DATA_R1; SP_REF = SP_REF - 1; end // push
    6'h1c : begin MEM_READ = 1; MEM_WRITE = 0; SP_REF = SP_REF + 1; MEM_ADDR = SP_REF; end // pop  
    endcase
    end

    if (proc_state === `PROC_WB)
    begin
    case(opcode)
    // R-Type
    6'h00 : begin
        case(funct)
            6'h20: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // add
            6'h22: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // sub
            6'h2c: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // mul
            6'h24: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // and
            6'h25: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // or
            6'h27: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // nor
            6'h2a: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // slt
            6'h01: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // sll
            6'h02: begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rd; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end //srl
            6'h08: begin RF_READ = 0; PC_REG = RF_DATA_R1; MEM_READ = 0; MEM_WRITE = 0; end // jr
        endcase
    end
    // I-type
    6'h08 : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rt; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // addi
    6'h1d : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rt; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // multi
    6'h0c : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rt; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // andi
    6'h0d : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rt; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // ori
    6'h0f : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rt; RF_DATA_W = {immediate, {16{1'b0}}};
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // lui
    6'h0a : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rt; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end // slti
    6'h04 : begin if (ZERO == 1) PC_REG = branchAddress; // if rs=rt then rs-rt == 0
                   MEM_READ = 0; MEM_WRITE = 0; end // beq
    6'h05 : begin if (ZERO == 0) PC_REG = branchAddress; // if rs=rt then rs-rt == 0
                   MEM_READ = 0; MEM_WRITE = 0; end // bne
    6'h23 : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = rt; RF_DATA_W = ALU_RESULT; 
                   PC_REG = PC_REG + 1; MEM_READ = 0; MEM_WRITE = 0; end  // lw
    6'h2b : begin MEM_READ = 0; MEM_WRITE = 1; MEM_ADDR = ALU_RESULT; write_data = RF_DATA_R1; end  // sw
    // J-Type
    6'h02 : begin PC_REG = {6'b0, address}; MEM_READ = 0; MEM_WRITE = 0; end // jmp
    6'h03 : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = 31; RF_DATA_W = PC_REG + 1; 
                   PC_REG = {6'b0, address}; MEM_READ = 0; MEM_WRITE = 0; end // jal
    6'h1b : begin MEM_READ = 0; MEM_WRITE = 0; end // push
    6'h1c : begin RF_READ = 0; RF_WRITE = 1; RF_ADDR_W = 0; RF_DATA_W = MEM_DATA; end// pop
    endcase
    end
    
    
end
endmodule;

//------------------------------------------------------------------------------------------
// Module: CONTROL_UNIT
// Output: STATE      : State of the processor
//         
// Input:  CLK        : Clock signal
//         RST        : Reset signal
//
// INOUT: MEM_DATA    : Data to be read in from or write to the memory
//
// Notes: - Processor continuously cycle witnin fetch, decode, execute, 
//          memory, write back state. State values are in the prj_definition.v
//
// Revision History:
//
// Version	Date		Who		email			note
//------------------------------------------------------------------------------------------
//  1.0     Sep 10, 2014	Kaushik Patra	kpatra@sjsu.edu		Initial creation
//------------------------------------------------------------------------------------------
module PROC_SM(STATE,CLK,RST);
// list of inputs
input CLK, RST;
// list of outputs
output [2:0] STATE;

reg [2:0] STATE;
reg [2:0] next_state;

// TBD - implement the state machine here
//always
//#5 CLK= ~CLK;
always @ (negedge RST)
begin
next_state = `PROC_FETCH;
STATE = 3'bxx;
end


always @(posedge CLK)
begin
    STATE = next_state;
    if (next_state === `PROC_FETCH)
        next_state = `PROC_DECODE;
    if (next_state === `PROC_DECODE)
        next_state = `PROC_EXE;
    if (next_state === `PROC_EXE)
        next_state = `PROC_MEM;
    if (next_state === `PROC_MEM)
        next_state = `PROC_WB;
    if (next_state === `PROC_WB)
        next_state = `PROC_FETCH;

end

endmodule;